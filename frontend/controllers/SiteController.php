<?php

namespace frontend\controllers;

use common\models\Anime;
use common\models\SplitAnime;
use common\models\User;
use common\models\UserData;
use frontend\models\ResendVerificationEmailForm;
use frontend\models\VerifyEmailForm;
use JsonException;
use Yii;
use yii\base\InvalidArgumentException;
use yii\base\InvalidConfigException;
use yii\debug\models\search\Profile;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use yii\web\ErrorAction;
use yii\web\JsonResponseFormatter;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\web\ServerErrorHttpException;
use yii\web\UploadedFile;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::class,
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::class,
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
            if($action->id == 'save' || $action->id == 'un-save' || $action->id = 'save-check'){
                Yii::$app->request->enableCsrfValidation = false;
            }
            return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => \yii\web\ErrorAction::class,
            ],
            'captcha' => [
                'class' => \yii\captcha\CaptchaAction::class,
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionIndex()
    {
        $this->layout = false;
        $user = User::findOne(Yii::$app->user->id);
        $model = Anime::find()->where(['status_posts' => 1])->all();
        return $this->render('index', [
            'model' => $model,
            'user' => $user
        ]);
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionAnimeParts($id)
    {
        $rows = Anime::find()->where(['id' => $id])->andWhere(['status_posts' => 1])->all();
        return $this->render('anime-parts', [
            'rows' => $rows
        ]);
    }

    public function actionSave($user_id, $anime_id)
    {
        if(Yii::$app->request->post()){
            $model = new UserData();
            if(!$model->saveValid($user_id, $anime_id)){
                $model->anime_id = $anime_id;
                $model->user_id = $user_id;
                $model->status = 'save';
                $model->save();
                return 'Сохранено!';
            } else {
                return 'Уже сохранено!';
            }
        } else {
            return 'Не получилось сохранить!';
        }
    }

    public function actionUnSave($user_id, $anime_id)
    {
        if(Yii::$app->request->post()){
            UserData::find()->where(['user_id' => $user_id])->andWhere(['anime_id' => $anime_id])->one()->delete();
            return 'Удалено!';
        }
    }

    public function actionSaveCheck($user_id, $anime_id){
        if(Yii::$app->request->post()){
            $query = UserData::find()->where(['user_id' => $user_id])->andWhere(['anime_id' => $anime_id])->one();
            if($query){
                return 'Аниме добавлено!';
            } else {
                return 'Пусто!';
            }
        }
    }

    /**
     * Save anime.
     */
    public function actionSaveAnime($user_id)
    {
        $rows = UserData::find()->where(['user_id' => $user_id])->andWhere(['status' => 'save'])->all();
        return $this->render('save_anime', [
            'rows' => $rows
        ]);
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionProfile()
    {
        return $this->render('profile');
    }

    /**
     * Displays homepage.
     *
     * @return mixed
     */
    public function actionCategory()
    {
        $model = Anime::find()->where(['status_posts' => 1])->all();
        return $this->render('category', [
            'model' => $model
        ]);
    }

    /**
     * Displays player.
     *
     * @return mixed
     */
    public function actionPlayer()
    {
        $this->layout = false;
        return $this->render('player');
    }

    /**
     * Logs in a user.
     *
     * @return mixed
     */
    public function actionLogin()
    {
        if (!Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            return $this->goBack();
        }

        $model->password = '';

        return $this->render('login', [
            'model' => $model,
        ]);
    }

    /**
     * Logs out the current user.
     *
     * @return mixed
     */
    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    /**
     * Signs user up.
     *
     * @return mixed
     */
    public function actionSignup()
    {
        $model = new SignupForm();
        $file = UploadedFile::getInstance($model, 'avatar');
        if ($model->load(Yii::$app->request->post())) {
            if ($file) {
                $avatarname = $file->baseName . '.' . $file->extension;
                $file->saveAs(Yii::getAlias('@frontend/web') . '/uploads/' . $avatarname);
                $model->avatar = $avatarname;
                $model->signup();
                Yii::$app->session->setFlash('success', 'Регистрация прошла успешно!');
                return $this->goHome();
            }
        }

        return $this->render('signup', [
            'model' => $model,
        ]);
    }

    /**
     * Requests password reset.
     *
     * @return mixed
     */
    public function actionRequestPasswordReset()
    {
        $model = new PasswordResetRequestForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');

                return $this->goHome();
            }

            Yii::$app->session->setFlash('error', 'Sorry, we are unable to reset password for the provided email address.');
        }

        return $this->render('requestPasswordResetToken', [
            'model' => $model,
        ]);
    }

    /**
     * Resets password.
     *
     * @param string $token
     * @return mixed
     * @throws BadRequestHttpException
     */
    public function actionResetPassword($token)
    {
        try {
            $model = new ResetPasswordForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }

        if ($model->load(Yii::$app->request->post()) && $model->validate() && $model->resetPassword()) {
            Yii::$app->session->setFlash('success', 'New password saved.');

            return $this->goHome();
        }

        return $this->render('resetPassword', [
            'model' => $model,
        ]);
    }

    /**
     * Verify email address
     *
     * @param string $token
     * @return yii\web\Response
     * @throws BadRequestHttpException
     */
    public function actionVerifyEmail($token)
    {
        try {
            $model = new VerifyEmailForm($token);
        } catch (InvalidArgumentException $e) {
            throw new BadRequestHttpException($e->getMessage());
        }
        if (($user = $model->verifyEmail()) && Yii::$app->user->login($user)) {
            Yii::$app->session->setFlash('success', 'Your email has been confirmed!');
            return $this->goHome();
        }

        Yii::$app->session->setFlash('error', 'Sorry, we are unable to verify your account with provided token.');
        return $this->goHome();
    }

    /**
     * Resend verification email
     *
     * @return mixed
     */
    public function actionResendVerificationEmail()
    {
        $model = new ResendVerificationEmailForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if ($model->sendEmail()) {
                Yii::$app->session->setFlash('success', 'Check your email for further instructions.');
                return $this->goHome();
            }
            Yii::$app->session->setFlash('error', 'Sorry, we are unable to resend verification email for the provided email address.');
        }

        return $this->render('resendVerificationEmail', [
            'model' => $model
        ]);
    }
}
